{"version":3,"sources":["components/GradeInput.jsx","App.js","serviceWorker.js","index.js"],"names":["FieldType","Object","freeze","grade","weight","GradeInput","state","lastWeight","handleUpdate","e","min","max","gradeName","fieldType","value","Number","parseInt","target","props","onUpdate","this","name","type","className","id","defaultValue","placeholder","onChange","onFocus","setState","onBlur","Component","gradesName","App","avg","NaN","grades","undefined","updateGrade","updateAvg","localStorage","setItem","JSON","stringify","forEach","gradesJson","getItem","populateGrades","parse","weightTotal","isNaN","map","key","toFixed","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8b7a80c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nconst FieldType = Object.freeze({ grade: 1, weight: 2 });\n\nclass GradeInput extends Component {\n  state = {lastWeight: 1}\n\n  handleUpdate = (e, min, max, gradeName, fieldType) => {\n    var value = Number.parseInt(e.target.value);\n    if (e.target.value !== \"\") {\n      if (value > max) {\n        e.target.value = max;\n        value = max;\n      } else if (value < min) {\n        e.target.value = min;\n        value = min;\n      }\n    }\n\n    var grade = this.props.grade;\n    var weight = this.props.weight;\n\n    if (fieldType === FieldType.grade) {\n      grade = value;\n    } else {\n      weight = value;\n    }\n\n    this.props.onUpdate(gradeName, grade, weight);\n  };\n\n  render() {\n    const gradeName = this.props.name;\n    return (\n      <tr>\n        <td>{gradeName}</td>\n        <td>\n          <input\n            type=\"number\"\n            className=\"form-control\"\n            id={gradeName}\n            defaultValue={this.props.grade}\n            min=\"10\"\n            max=\"1000\"\n            placeholder=\"Nota\"\n            onChange={e =>\n              this.handleUpdate(e, 0, 1000, this.props.name, FieldType.grade)\n            }\n          />\n        </td>\n        <td>\n          <input\n            type=\"number\"\n            className=\"form-control\"\n            id={`${gradeName}-weight`}\n            defaultValue={this.props.weight}\n            min=\"1\"\n            max=\"5\"\n            placeholder=\"Peso\"\n            onFocus={e => {\n              if(e.target.value !== \"\") {\n                this.setState({lastWeight: e.target.value})\n              }\n              e.target.value = \"\"\n            }}\n            onBlur={e => e.target.value = e.target.value === \"\" ? this.state.lastWeight : e.target.value}\n            onChange={e =>\n              this.handleUpdate(e, 1, 5, this.props.name, FieldType.weight)\n            }\n          />\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default GradeInput;\n","import React, { Component } from 'react';\n\nimport './styles/App.scss';\n\nimport GradeInput from \"./components/GradeInput\"\n\nconst gradesName = [\"Ciências Naturais\", \"Ciências Humanas\", \"Linguagens\", \"Matemática\", \"Redação\"]\n\nclass App extends Component {\n  state = { avg: NaN, grades: undefined }\n\n  populateGrades(grades) {\n    gradesName.forEach(name => {\n      grades[name] = { grade: NaN, weight: 1 }\n    })\n    return grades;\n  }\n\n  componentDidMount() {\n    var gradesJson = localStorage.getItem(\"grades\")\n    var grades = {}\n    if (gradesJson === null) {\n      grades = this.populateGrades(grades);\n    } else {\n      try {\n        grades = JSON.parse(gradesJson)\n      } catch (e) {\n        grades = this.populateGrades(grades);\n      }\n    }\n\n    this.setState({ grades: grades })\n    this.updateAvg(grades)\n  }\n\n  updateAvg(grades) {\n    if (grades === null) grades = this.state.grades\n    var avg = 0\n    var weightTotal = 0\n    for (var gradeName in grades) {\n      const { grade, weight } = grades[gradeName]\n      if (Number.isNaN(grade)) continue;\n\n      avg += grade * weight\n      weightTotal += weight\n    }\n    this.setState({ avg: avg / weightTotal })\n  }\n\n  updateGrade = (name, grade, weight) => {\n    var grades = this.state.grades\n    grades[name] = { grade: grade, weight: weight }\n    this.setState({ grade: grade })\n\n    this.updateAvg(grades)\n\n    localStorage.setItem(\"grades\", JSON.stringify(grades))\n  }\n\n  render() {\n    if (!this.state.grades) return null\n    return <div className=\"App\" >\n      <center>\n        <h2 id=\"header\">Média Ponderada</h2>\n        <br></br>\n        <div id=\"table-container\">\n          <table>\n            <thead>\n              <tr>\n                <th>Matéria</th>\n                <th>Nota</th>\n                <th>Peso</th>\n              </tr>\n            </thead>\n            <tbody>\n              {gradesName.map(name => {\n                return <GradeInput\n                  name={name}\n                  key={name}\n                  onUpdate={this.updateGrade}\n                  grade={this.state.grades[name].grade}\n                  weight={this.state.grades[name].weight}\n                />\n              })}\n            </tbody>\n          </table>\n          <br />\n          <h2>{Number.isNaN(this.state.avg) ? '' : `Sua média é ${this.state.avg.toFixed(2)}.`}</h2>\n        </div>\n        <br />\n        <p id=\"created-by\">Criado por <span><a href=\"https://github.com/Pauloo27\">Pauloo27</a></span> usando ReactJS.</p>\n      </center>\n    </div>\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery';\nimport 'bootstrap/dist/js/bootstrap';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}