{"version":3,"sources":["components/GradeInput.jsx","App.js","serviceWorker.js","index.js"],"names":["FieldType","Object","freeze","grade","weight","GradeInput","props","state","lastWeight","handleUpdate","e","min","max","gradeName","fieldType","value","Number","parseFloat","target","onUpdate","eventEmitter","on","name","document","getElementById","this","type","className","id","defaultValue","step","placeholder","onChange","onFocus","setState","onBlur","Component","gradesName","App","avg","NaN","grades","undefined","eventEmmitter","EventEmitter","updateGrade","updateAvg","localStorage","setItem","JSON","stringify","handleWeightImport","forEach","parseInt","defaultWeights","selectedIndex","emit","gradesJson","getItem","populateGrades","parse","weightTotal","isNaN","index","htmlFor","map","defaultWeight","key","toFixed","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25df7edd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nconst FieldType = Object.freeze({ grade: 1, weight: 2 });\n\nclass GradeInput extends Component {\n  state = { lastWeight: 1 };\n\n  constructor(props) {\n    super(props);\n    this.props.eventEmitter.on(\"import\", (grade, value) => {\n      if (this.props.name === grade) {\n        document.getElementById(`${grade}-weight`).value = value;\n      }\n    });\n  }\n\n  handleUpdate = (e, min, max, gradeName, fieldType) => {\n    var value = Number.parseFloat(e.target.value);\n    if (e.target.value !== \"\") {\n      if (value > max) {\n        e.target.value = max;\n        value = max;\n      } else if (value < min) {\n        e.target.value = min;\n        value = min;\n      }\n    }\n\n    var grade = this.props.grade;\n    var weight = this.props.weight;\n\n    if (fieldType === FieldType.grade) {\n      grade = value;\n    } else {\n      weight = value;\n    }\n\n    this.props.onUpdate(gradeName, grade, weight);\n  };\n\n  render() {\n    const gradeName = this.props.name;\n    return (\n      <tr>\n        <td>{gradeName}</td>\n        <td>\n          <input\n            type=\"number\"\n            className=\"form-control\"\n            id={gradeName}\n            defaultValue={this.props.grade}\n            min=\"10\"\n            max=\"1000\"\n            step=\"0.01\"\n            placeholder=\"Nota\"\n            onChange={e =>\n              this.handleUpdate(e, 0, 1000, this.props.name, FieldType.grade)\n            }\n          />\n        </td>\n        <td>\n          <input\n            type=\"number\"\n            className=\"form-control\"\n            id={`${gradeName}-weight`}\n            defaultValue={this.props.weight}\n            min=\"1\"\n            max=\"5\"\n            placeholder=\"Peso\"\n            onFocus={e => {\n              if (e.target.value !== \"\") {\n                this.setState({ lastWeight: e.target.value });\n              }\n              e.target.value = \"\";\n            }}\n            onBlur={e =>\n              (e.target.value =\n                e.target.value === \"\" ? this.state.lastWeight : e.target.value)\n            }\n            onChange={e =>\n              this.handleUpdate(e, 1, 5, this.props.name, FieldType.weight)\n            }\n          />\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default GradeInput;\n","import React, { Component } from \"react\";\nimport \"./styles/App.scss\";\nimport defaultWeights from \"./weights.json\";\n\nimport GradeInput from \"./components/GradeInput\";\nimport { EventEmitter } from \"events\";\n\nconst gradesName = [\n  \"Linguagens\",\n  \"Ciências Humanas\",\n  \"Ciências Naturais\",\n  \"Matemática\",\n  \"Redação\"\n];\n\nclass App extends Component {\n  state = { avg: NaN, grades: undefined };\n  eventEmmitter = new EventEmitter();\n\n  populateGrades(grades) {\n    gradesName.forEach(name => {\n      grades[name] = { grade: NaN, weight: 1 };\n    });\n    return grades;\n  }\n\n  componentDidMount() {\n    var gradesJson = localStorage.getItem(\"grades\");\n    var grades = {};\n    if (gradesJson === null) {\n      grades = this.populateGrades(grades);\n    } else {\n      try {\n        grades = JSON.parse(gradesJson);\n      } catch (e) {\n        grades = this.populateGrades(grades);\n      }\n    }\n\n    this.setState({ grades: grades });\n    this.updateAvg(grades);\n  }\n\n  updateAvg(grades) {\n    if (grades === null) grades = this.state.grades;\n    var avg = 0;\n    var weightTotal = 0;\n    for (var gradeName in grades) {\n      const { grade, weight } = grades[gradeName];\n      if (Number.isNaN(grade)) continue;\n\n      avg += grade * weight;\n      weightTotal += weight;\n    }\n    this.setState({ avg: avg / weightTotal });\n  }\n\n  updateGrade = (name, grade, weight) => {\n    var grades = this.state.grades;\n    grades[name] = { grade: grade, weight: weight };\n    this.setState({ grade: grade });\n\n    this.updateAvg(grades);\n\n    localStorage.setItem(\"grades\", JSON.stringify(grades));\n  };\n\n  handleWeightImport = () => {\n    gradesName.forEach(grade => {\n      const value =  Number.parseInt(\n        defaultWeights[document.getElementById(\"sel1\").selectedIndex][grade]\n      )\n      this.updateGrade(\n        grade,\n        this.state.grades[grade][\"grade\"],\n        value\n      );\n      this.eventEmmitter.emit(\"import\", grade, value);\n    });\n  };\n\n  render() {\n    if (!this.state.grades) return null;\n    let index = 0;\n    return (\n      <div className=\"App\">\n        <center>\n          <h2 id=\"header\">Média Ponderada</h2>\n          <label htmlFor=\"sel1\">Usar pesos de:</label>\n          <select\n            className=\"form-control\"\n            id=\"sel1\"\n            onChange={this.handleWeightImport}\n          >\n            {defaultWeights.map(defaultWeight => {\n              return (\n                <option\n                  value={index++}\n                  key={index}\n                >{`${defaultWeight[\"course\"]} - ${defaultWeight[\"college\"]}`}</option>\n              );\n            })}\n          </select>\n          <div id=\"table-container\">\n            <table>\n              <thead>\n                <tr>\n                  <th>Matéria</th>\n                  <th>Nota</th>\n                  <th>Peso</th>\n                </tr>\n              </thead>\n              <tbody>\n                {gradesName.map(name => {\n                  return (\n                    <GradeInput\n                      name={name}\n                      key={name}\n                      onUpdate={this.updateGrade}\n                      grade={this.state.grades[name].grade}\n                      weight={this.state.grades[name].weight}\n                      eventEmitter={this.eventEmmitter}\n                    />\n                  );\n                })}\n              </tbody>\n            </table>\n            <h2>\n              {Number.isNaN(this.state.avg)\n                ? \"\"\n                : `Sua média é ${this.state.avg.toFixed(2)}.`}\n            </h2>\n          </div>\n          <p id=\"created-by\">\n            Criado por{\" \"}\n            <span>\n              <a href=\"https://github.com/Pauloo27/Grade\" target=\"_blank\" rel=\"noopener noreferrer\">Pauloo27</a>\n            </span>{\" \"}\n            usando ReactJS.\n          </p>\n        </center>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery';\nimport 'bootstrap/dist/js/bootstrap';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}